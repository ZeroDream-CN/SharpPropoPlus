<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:SharpPropoPlus.Views"
             xmlns:viewModels="clr-namespace:SharpPropoPlus.ViewModels"
             xmlns:controls="clr-namespace:SharpPropoPlus.Controls"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="SharpPropoPlus.Views.AudioConfig"
             mc:Ignorable="d" 
             d:DesignHeight="400" d:DesignWidth="600">


    <UserControl.Resources>


        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="#1c1e20"/>
            <Setter Property="FontFamily" Value="pack://application:,,,/Fonts/#Montserrat Light"/>
        </Style>

        <Style TargetType="{x:Type ContextMenu}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Foreground" Value="#1c1e20" />
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Grid Background="#01000000" Cursor="Hand">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="CheckBorder" VerticalAlignment="Stretch"  Background="{TemplateBinding Foreground}" Grid.Column="0" Width="2"/>

                                        <Border VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  Grid.Column="1" Padding="16 12 48 12">
                                            <!--<ContentPresenter ContentTemplate="{TemplateBinding ItemTemplate}" Content="{TemplateBinding Header}"></ContentPresenter>-->
                                            <ContentControl x:Name="ContentControl" Foreground="{TemplateBinding Foreground}" ContentTemplate="{TemplateBinding ItemTemplate}" TextBlock.FontWeight="Light" TextBlock.FontSize="13" TextBlock.FontFamily="pack://application:,,,/Fonts/#Montserrat Light" Content="{TemplateBinding Header}" />
                                        </Border>
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ContentControl" Property="Opacity" Value="0.5" />
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="False">
                                            <Setter TargetName="CheckBorder" Property="Visibility" Value="Hidden" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border Padding="6">
                            <Border BorderThickness="1" CornerRadius="4" BorderBrush="#c1c1c1" x:Name="Border" Background="White">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="6" Color="#c1c1c1" Direction="-45" ShadowDepth="1" RenderingBias="Quality"/>
                                </Border.Effect>
                                <StackPanel Margin="0 4" ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <LinearGradientBrush x:Key="ComboBox.Static.Background2" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
            <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Static.Border2" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Background2" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFECF4FC" Offset="0.0"/>
            <GradientStop Color="#FFDCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph2" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
        <Style x:Key="ComboBoxToggleButton2" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="Transparent" BorderThickness="0" BorderBrush="{StaticResource ComboBox.Static.Border2}">
                            <Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="0" BorderBrush="Transparent">
                                <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" Width="8" Stretch="Uniform" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="M 4 17 L 25 39 L 46 17 L 4 17 z"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background2}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>-->
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>-->
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph2}"/>
                            </Trigger>
                            <!--<MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>-->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate2" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom">

                    <Border Padding="6 6 6 6">
                        <Border x:Name="dropDownBorder" BorderThickness="1" CornerRadius="4" BorderBrush="#c1c1c1" Background="White">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="6" Color="#c1c1c1" Direction="-45" ShadowDepth="1" RenderingBias="Quality"/>
                            </Border.Effect>

                            <ScrollViewer x:Name="DropDownScrollViewer" Margin="0 4" >
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                    </ItemsPresenter>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Border>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton2}"/>
                <ContentPresenter x:Name="contentPresenter" TextBlock.FontSize="13" TextBlock.FontFamily="pack://application:,,,/Fonts/#Montserrat Light" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="False">
                    <Setter Property="Effect" TargetName="dropDownBorder" Value="{x:Null}"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background2}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border2}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

            
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                                    <Grid Background="#01000000" Cursor="Hand">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="CheckBorder" Visibility="Hidden" VerticalAlignment="Stretch"  Background="{TemplateBinding Foreground}" Grid.Column="0" Width="2"/>

                                        <Border VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  Grid.Column="1" Padding="16 12 48 12">
                                            <ContentPresenter x:Name="ContentControl" TextBlock.FontWeight="Light" TextBlock.FontSize="13" TextBlock.FontFamily="pack://application:,,,/Fonts/#Montserrat Light" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        </Border>
                                    </Grid>
                                    
                                    <ControlTemplate.Triggers>

                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ContentControl" Property="Opacity" Value="0.5" />
                                        </Trigger>

                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="CheckBorder" Property="Visibility" Value="Visible" />
                                        </Trigger>


                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate2}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>

                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" Value="0.5"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </UserControl.Resources>
    <!--<UserControl.DataContext>
        <viewModels:AudioConfigViewModel></viewModels:AudioConfigViewModel>
    </UserControl.DataContext>-->

    <StackPanel>

        <StackPanel Orientation="Vertical" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4" Margin="0 0 0 8"  >
            <!--<Border HorizontalAlignment="Stretch" SnapsToDevicePixels="True" BorderThickness="0 0 0 1" BorderBrush="#f0f0f0"/>-->
            <TextBlock Margin="0 4" Text="Input Device" FontSize="14.5" FontFamily="pack://application:,,,/Fonts/#Montserrat" TextAlignment="Left" VerticalAlignment="Center"/>

            <ComboBox Margin="0 8" HorizontalAlignment="Left" Grid.Row="1" DisplayMemberPath="DeviceName" SelectedIndex="0" ItemsSource="{Binding AudioEndPointCollection, Mode=OneWay}" SelectedItem="{Binding SelectedAudioEndPoint, Mode=TwoWay}" >
                <!--<ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding DeviceName}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>-->
            </ComboBox>
        </StackPanel>

        <Border HorizontalAlignment="Stretch" SnapsToDevicePixels="True" BorderThickness="0 0 0 1" BorderBrush="#f0f0f0"/>

        <Grid Margin="0 8" >
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <TextBlock Margin="0 4" Text="Bitrate" FontSize="14.5" FontFamily="pack://application:,,,/Fonts/#Montserrat" TextAlignment="Left" VerticalAlignment="Center"/>

            <ComboBox Margin="0 8" HorizontalAlignment="Left" Grid.Row="1" SelectedIndex="0" ItemsSource="{Binding BitrateCollection, Mode=OneWay}" SelectedItem="{Binding SelectedBitrateItem, Mode=TwoWay}" >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource AudioBitrateValueConverter}, Mode=OneWay}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </Grid>

        <Border HorizontalAlignment="Stretch" SnapsToDevicePixels="True" BorderThickness="0 0 0 1" BorderBrush="#f0f0f0"/>


        <Grid Margin="0 8" >
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <TextBlock Margin="0 4" Text="Source Channel" FontSize="14.5" FontFamily="pack://application:,,,/Fonts/#Montserrat" TextAlignment="Left" VerticalAlignment="Center"/>

            <ComboBox Margin="0 8" HorizontalAlignment="Left" Grid.Row="1" SelectedIndex="0" ItemsSource="{Binding ChannelCollection, Mode=OneWay}" SelectedItem="{Binding SelectedChannelItem, Mode=TwoWay}" >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource AudioChannelValueConverter}, Mode=OneWay}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
                
                <ComboBox.Style>
                    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">

                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RightChannelPeak}" Value="{x:Null}">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </ComboBox.Style>
            </ComboBox>
        </Grid>

        <Border HorizontalAlignment="Stretch" SnapsToDevicePixels="True" BorderThickness="0 0 0 1" BorderBrush="#f0f0f0"/>


        <Grid Margin="0 8" >
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <TextBlock Margin="0 4" Text="Audio Levels" FontSize="14.5" FontFamily="pack://application:,,,/Fonts/#Montserrat" TextAlignment="Left" VerticalAlignment="Center"/>

            <StackPanel Grid.Row="1">
                <Grid Margin="0 2">
                    <controls:StripIndicator Value="{Binding LeftChannelPeak, Mode=OneWay}" Maximum="100" Minimum="0" BorderThickness="1" >
                        <controls:StripIndicator.Resources>
                            <Style TargetType="{x:Type controls:StripIndicator}" BasedOn="{StaticResource {x:Type controls:StripIndicator}}">
                                <!--<Style.Triggers>
                                    <DataTrigger Binding="{Binding Muted}" Value="true">
                                        <Setter Property="BorderBrush" Value="Red"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>-->
                            </Style>
                        </controls:StripIndicator.Resources>
                    </controls:StripIndicator>
                    <TextBlock Panel.ZIndex="0" Margin="8 0 0 0" VerticalAlignment="Center" HorizontalAlignment="Left">
                        <TextBlock.Resources>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Setter Property="Text" Value="Left"/>


                                <Style.Triggers>
                                    <!--<DataTrigger Binding="{Binding Muted}" Value="true">
                                        <Setter Property="Text" Value="Left (Muted)"></Setter>
                                    </DataTrigger>-->

                                    <DataTrigger Binding="{Binding RightChannelPeak}" Value="{x:Null}">
                                        <Setter Property="Text" Value="Mono"/>
                                    </DataTrigger>

                                </Style.Triggers>
                            </Style>
                        </TextBlock.Resources>
                    </TextBlock>

                    <TextBlock Panel.ZIndex="0" Margin="0 0 8 0" Text="{Binding LeftChannelPeak, Mode=OneWay, StringFormat=\{0\}%}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>

                <Grid Margin="0 2">
                    <Grid.Style>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Visibility" Value="Visible"/>

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RightChannelPeak}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <controls:StripIndicator Value="{Binding RightChannelPeak, Mode=OneWay}" Maximum="100" Minimum="0" BorderThickness="1" >
                        <controls:StripIndicator.Resources>
                            <Style TargetType="{x:Type controls:StripIndicator}" BasedOn="{StaticResource {x:Type controls:StripIndicator}}">
                                <!--<Style.Triggers>
                                    <DataTrigger Binding="{Binding Muted}" Value="true">
                                        <Setter Property="BorderBrush" Value="Red"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>-->
                            </Style>
                        </controls:StripIndicator.Resources>
                    </controls:StripIndicator>
                    <TextBlock Panel.ZIndex="0" Margin="8 0 0 0" Foreground="#000000" VerticalAlignment="Center" HorizontalAlignment="Left">
                        <TextBlock.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Right"/>
                                <!--<Style.Triggers>
                                    <DataTrigger Binding="{Binding Muted}" Value="true">
                                        <Setter Property="Text" Value="Right (Muted)"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>-->
                            </Style>
                        </TextBlock.Resources>
                    </TextBlock>
                    <TextBlock Panel.ZIndex="0" Margin="0 0 8 0" Foreground="#000000" Text="{Binding RightChannelPeak, Mode=OneWay, StringFormat=\{0\}%}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>

            </StackPanel>



            <!--<ComboBox MinWidth="200" HorizontalAlignment="Left" Grid.Row="1" SelectedIndex="0" ItemsSource="{Binding ChannelCollection, Mode=OneWay}" SelectedItem="{Binding SelectedChannelItem, Mode=TwoWay}" >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Mode=OneWay}">
                        </TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>-->
        </Grid>
    </StackPanel>
</UserControl>
